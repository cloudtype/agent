apiVersion: v1
kind: Namespace
metadata:
  name: cloudtype
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloudtype-agent
  namespace: cloudtype
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cloudtype-agent
  namespace: cloudtype
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: cloudtype-agent
    namespace: cloudtype
---
apiVersion: v1
kind: Service
metadata:
  name: agent
  namespace: cloudtype
  labels:
    service: cloudtype
    app: agent
    module: agent
spec:
  ports:
    - appProtocol: http
      name: http
      port: 80
      protocol: TCP
      targetPort: 8080
    - appProtocol: https
      name: https
      port: 443
      protocol: TCP
      targetPort: 8443
  selector:
    service: cloudtype
    app: agent
    module: agent
  type: LoadBalancer
  externalTrafficPolicy: Local
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agent
  namespace: cloudtype
  labels:
    service: cloudtype
    app: agent
    module: agent
spec:
  selector:
    matchLabels:
      service: cloudtype
      app: agent
      module: agent
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        service: cloudtype
        app: agent
        module: agent
    spec:
      serviceAccountName: cloudtype-agent
      containers:
        - name: agent
          image: cloudtype/agent:1
          imagePullPolicy: Always
          resources:
            requests:
              cpu: 500m
              memory: 512Mi
          ports:
            - containerPort: 8080
            - containerPort: 8443
          readinessProbe:
            tcpSocket:
              port: 8080
          livenessProbe:
            tcpSocket:
              port: 8080
          startupProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 5
          env:
            - name: NODE_ENV
              value: production
      terminationGracePeriodSeconds: 5
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloudtype-builder
  namespace: cloudtype
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cloudtype-builder
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: cloudtype-builder
    namespace: cloudtype
---
apiVersion: v1
kind: Service
metadata:
  name: docker-daemon
  namespace: cloudtype
  labels:
    service: cloudtype
    app: builder
    module: docker-daemon
spec:
  ports:
    - port: 2376
      protocol: TCP
  selector:
    service: cloudtype
    app: builder
    module: docker-daemon
  clusterIP: None
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: docker-daemon-volume
  namespace: cloudtype
  labels:
    service: cloudtype
    app: builder
    module: docker-daemon
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-daemon
  namespace: cloudtype
  labels:
    service: cloudtype
    app: builder
    module: docker-daemon
spec:
  selector:
    matchLabels:
      service: cloudtype
      app: builder
      module: docker-daemon
  replicas: 1
  minReadySeconds: 10
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        service: cloudtype
        app: builder
        module: docker-daemon
    spec:
      serviceAccountName: cloudtype-builder
      containers:
        - name: docker-dind
          image: docker:20-dind
          env:
            - name: DOCKER_TLS_CERTDIR
              value: ''
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
          securityContext:
            privileged: true
          ports:
            - containerPort: 2376
          volumeMounts:
            - name: docker-graph-storage
              mountPath: /var/lib/docker
      volumes:
        - name: docker-graph-storage
          persistentVolumeClaim:
            claimName: docker-daemon-volume
      terminationGracePeriodSeconds: 30